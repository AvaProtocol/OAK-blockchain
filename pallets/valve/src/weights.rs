// This file is part of OAK-blockchain.

// Copyright (C) OAK Network Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_valve
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `actions-runner-1`, CPU: `Intel(R) Xeon(R) E-2388G CPU @ 3.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("turing-dev"), DB CACHE: 1024

// Executed Command:
// ./oak-collator
// benchmark
// pallet
// --header
// ./.maintain/HEADER-GPL3
// --chain
// turing-dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_valve
// --extrinsic
// *
// --repeat
// 20
// --steps
// 50
// --output
// ./valve-raw-weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

// Summary:
//:close_valve 16_312_000,4687
//:open_valve 16_991_000,4687
//:close_pallet_gate_new 20_340_000,4687
//:close_pallet_gate_existing 13_943_000,4687
//:open_pallet_gate 21_157_000,4687
//:open_pallet_gates 23_458_000,13723
//:stop_scheduled_tasks 15_875_000,4687
//:start_scheduled_tasks 16_713_000,4687

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_valve.
pub trait WeightInfo {
	fn close_valve() -> Weight;
	fn open_valve() -> Weight;
	fn close_pallet_gate_new() -> Weight;
	fn close_pallet_gate_existing() -> Weight;
	fn open_pallet_gate() -> Weight;
	fn open_pallet_gates() -> Weight;
	fn stop_scheduled_tasks() -> Weight;
	fn start_scheduled_tasks() -> Weight;
}

/// Weights for pallet_valve using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:1)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	fn close_valve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 15_784_000 picoseconds.
		Weight::from_parts(16_312_000, 4687)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:1)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	fn open_valve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250`
		//  Estimated: `4687`
		// Minimum execution time: 16_708_000 picoseconds.
		Weight::from_parts(16_991_000, 4687)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn close_pallet_gate_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 20_014_000 picoseconds.
		Weight::from_parts(20_340_000, 4687)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn close_pallet_gate_existing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `4687`
		// Minimum execution time: 13_703_000 picoseconds.
		Weight::from_parts(13_943_000, 4687)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn open_pallet_gate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `4687`
		// Minimum execution time: 20_861_000 picoseconds.
		Weight::from_parts(21_157_000, 4687)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ClosedPallets (r:5 w:5)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn open_pallet_gates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `358`
		//  Estimated: `13723`
		// Minimum execution time: 23_130_000 picoseconds.
		Weight::from_parts(23_458_000, 13723)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: AutomationTime Shutdown (r:1 w:1)
	/// Proof Skipped: AutomationTime Shutdown (max_values: Some(1), max_size: None, mode: Measured)
	fn stop_scheduled_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `4687`
		// Minimum execution time: 15_458_000 picoseconds.
		Weight::from_parts(15_875_000, 4687)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: AutomationTime Shutdown (r:1 w:1)
	/// Proof Skipped: AutomationTime Shutdown (max_values: Some(1), max_size: None, mode: Measured)
	fn start_scheduled_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 16_108_000 picoseconds.
		Weight::from_parts(16_713_000, 4687)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:1)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	fn close_valve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 15_784_000 picoseconds.
		Weight::from_parts(16_312_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:1)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	fn open_valve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `250`
		//  Estimated: `4687`
		// Minimum execution time: 16_708_000 picoseconds.
		Weight::from_parts(16_991_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn close_pallet_gate_new() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 20_014_000 picoseconds.
		Weight::from_parts(20_340_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn close_pallet_gate_existing() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `4687`
		// Minimum execution time: 13_703_000 picoseconds.
		Weight::from_parts(13_943_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:1)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn open_pallet_gate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `264`
		//  Estimated: `4687`
		// Minimum execution time: 20_861_000 picoseconds.
		Weight::from_parts(21_157_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: Valve ClosedPallets (r:5 w:5)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ClosedPalletCount (r:1 w:1)
	/// Proof Skipped: Valve ClosedPalletCount (max_values: Some(1), max_size: None, mode: Measured)
	fn open_pallet_gates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `358`
		//  Estimated: `13723`
		// Minimum execution time: 23_130_000 picoseconds.
		Weight::from_parts(23_458_000, 13723)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: AutomationTime Shutdown (r:1 w:1)
	/// Proof Skipped: AutomationTime Shutdown (max_values: Some(1), max_size: None, mode: Measured)
	fn stop_scheduled_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `205`
		//  Estimated: `4687`
		// Minimum execution time: 15_458_000 picoseconds.
		Weight::from_parts(15_875_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: TechnicalMembership Members (r:1 w:0)
	/// Proof: TechnicalMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
	/// Storage: AutomationTime Shutdown (r:1 w:1)
	/// Proof Skipped: AutomationTime Shutdown (max_values: Some(1), max_size: None, mode: Measured)
	fn start_scheduled_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `229`
		//  Estimated: `4687`
		// Minimum execution time: 16_108_000 picoseconds.
		Weight::from_parts(16_713_000, 4687)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
