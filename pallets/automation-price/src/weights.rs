
//! Autogenerated weights for pallet_automation_price
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Akhils-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("turing-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/oak-collator
// benchmark
// pallet
// --chain=turing-dev
// --steps=50
// --repeat=20
// --pallet=pallet_automation_price
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/automation_time-raw-weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_automation_price.
pub trait WeightInfo {
	fn initialize_asset_extrinsic(v: u32, ) -> Weight;
	fn asset_price_update_extrinsic(v: u32, ) -> Weight;
	fn schedule_xcmp_task_extrinsic() -> Weight;
	fn cancel_task_extrinsic() -> Weight;
	fn run_xcmp_task() -> Weight;
	fn remove_task() -> Weight;
	fn emit_event() -> Weight;
}

/// Weights for pallet_automation_price using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: AutomationPrice AssetRegistry (r:1 w:1)
	/// Proof Skipped: AutomationPrice AssetRegistry (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 5]`.
	fn initialize_asset_extrinsic(_v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_940_362, 3541)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 100]`.
	fn asset_price_update_extrinsic(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_560_478, 1493)
			// Standard Error: 730
			.saturating_add(Weight::from_parts(213_585, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn schedule_xcmp_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationPrice Tasks (r:1 w:0)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3579)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3946)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: AutomationPrice SortedTasksIndex (r:1 w:0)
	/// Proof Skipped: AutomationPrice SortedTasksIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice SortedTasksByExpiration (r:1 w:1)
	/// Proof Skipped: AutomationPrice SortedTasksByExpiration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationPrice TaskStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice TaskStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice AccountStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice AccountStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice Tasks (r:0 w:1)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn remove_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3579)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: AutomationPrice AssetRegistry (r:1 w:1)
	/// Proof Skipped: AutomationPrice AssetRegistry (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 5]`.
	fn initialize_asset_extrinsic(_v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(19_940_362, 3541)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 100]`.
	fn asset_price_update_extrinsic(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_560_478, 1493)
			// Standard Error: 730
			.saturating_add(Weight::from_parts(213_585, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn schedule_xcmp_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 1493)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationPrice Tasks (r:1 w:0)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 3579)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_000_000, 3946)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: AutomationPrice SortedTasksIndex (r:1 w:0)
	/// Proof Skipped: AutomationPrice SortedTasksIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice SortedTasksByExpiration (r:1 w:1)
	/// Proof Skipped: AutomationPrice SortedTasksByExpiration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationPrice TaskStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice TaskStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice AccountStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice AccountStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice Tasks (r:0 w:1)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn remove_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3579)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
	}
}