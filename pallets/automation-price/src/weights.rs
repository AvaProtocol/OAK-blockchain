
//! Autogenerated weights for `pallet_automation_time`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-05-26, STEPS: `1`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Summary:
//:emit_event 20_000_000
//:reset_asset 200_000_000
//:run_native_transfer_task 230_000_000

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_automation_time.
pub trait WeightInfo {
	fn emit_event() -> Weight;
	fn run_native_transfer_task() -> Weight;
	fn reset_asset(v: u32, ) -> Weight;
	fn update_asset_reset() -> Weight;
	fn delete_asset_tasks() -> Weight;
	
	fn delete_asset_extrinsic() -> Weight;
	fn asset_price_update_extrinsic() -> Weight;
	fn initialize_asset_extrinsic() -> Weight;
	fn schedule_transfer_task_extrinsic() -> Weight;
	fn schedule_xcmp_task() -> Weight;
	fn schedule_xcmp_task_through_proxy() -> Weight;
    fn cancel_task() -> Weight;
    fn run_xcmp_task() -> Weight;
}

/// TODO: these are hard code value, need to be change
/// Weights for pallet_automation_time using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn emit_event() -> Weight {
		Weight::from_ref_time(20_000_000_u64)
	}
	fn run_native_transfer_task() -> Weight {
		Weight::from_ref_time(230_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn reset_asset(v: u32, ) -> Weight {
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_ref_time(20_000_000_u64).saturating_mul(v as u64))
			.saturating_add(RocksDbWeight::get().reads(4_u64.saturating_mul(v as u64)))
			.saturating_add(RocksDbWeight::get().writes(5_u64.saturating_mul(v as u64)))
	}
	fn update_asset_reset() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	fn delete_asset_tasks() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	fn delete_asset_extrinsic() -> Weight{
		Weight::from_ref_time(220_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	fn asset_price_update_extrinsic() -> Weight{
		Weight::from_ref_time(220_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().reads(21_u64))
			.saturating_add(RocksDbWeight::get().writes(21_u64))
	}
	fn initialize_asset_extrinsic() -> Weight{
		Weight::from_ref_time(220_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	fn schedule_transfer_task_extrinsic() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}

	fn schedule_xcmp_task() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}

	fn schedule_xcmp_task_through_proxy() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}

fn cancel_task() -> Weight {
		Weight::from_ref_time(20_000_000_u64)
	}

    // TODO: Re-generate
	fn run_xcmp_task() -> Weight{
		Weight::from_ref_time(200_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
}
