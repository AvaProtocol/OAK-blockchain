// This file is part of OAK-blockchain.

// Copyright (C) OAK Network Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_automation_price
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `actions-runner-1`, CPU: `Intel(R) Xeon(R) E-2388G CPU @ 3.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("turing-dev"), DB CACHE: 1024

// Executed Command:
// ./oak-collator
// benchmark
// pallet
// --header
// ./.maintain/HEADER-GPL3
// --chain
// turing-dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_automation_price
// --extrinsic
// *
// --repeat
// 20
// --steps
// 50
// --output
// ./automation_price-raw-weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_automation_price.
pub trait WeightInfo {
	fn initialize_asset_extrinsic(v: u32, ) -> Weight;
	fn asset_price_update_extrinsic(v: u32, ) -> Weight;
	fn schedule_xcmp_task_extrinsic() -> Weight;
	fn cancel_task_extrinsic() -> Weight;
	fn run_xcmp_task() -> Weight;
	fn remove_task() -> Weight;
	fn emit_event() -> Weight;
}

/// Weights for pallet_automation_price using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: AutomationPrice AssetRegistry (r:1 w:1)
	/// Proof Skipped: AutomationPrice AssetRegistry (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 5]`.
	fn initialize_asset_extrinsic(_v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 21_041_000 picoseconds.
		Weight::from_parts(21_538_812, 3541)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 100]`.
	fn asset_price_update_extrinsic(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 7_631_000 picoseconds.
		Weight::from_parts(7_985_534, 1493)
			// Standard Error: 162
			.saturating_add(Weight::from_parts(160_256, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn schedule_xcmp_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 12_439_000 picoseconds.
		Weight::from_parts(12_732_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationPrice Tasks (r:1 w:0)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 9_191_000 picoseconds.
		Weight::from_parts(9_360_000, 3579)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 36_565_000 picoseconds.
		Weight::from_parts(37_294_000, 3946)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: AutomationPrice SortedTasksIndex (r:1 w:0)
	/// Proof Skipped: AutomationPrice SortedTasksIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice SortedTasksByExpiration (r:1 w:1)
	/// Proof Skipped: AutomationPrice SortedTasksByExpiration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationPrice TaskStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice TaskStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice AccountStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice AccountStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice Tasks (r:0 w:1)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn remove_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 23_104_000 picoseconds.
		Weight::from_parts(23_629_000, 3579)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_568_000 picoseconds.
		Weight::from_parts(5_701_000, 0)
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: AutomationPrice AssetRegistry (r:1 w:1)
	/// Proof Skipped: AutomationPrice AssetRegistry (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 5]`.
	fn initialize_asset_extrinsic(_v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `3541`
		// Minimum execution time: 21_041_000 picoseconds.
		Weight::from_parts(21_538_812, 3541)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 100]`.
	fn asset_price_update_extrinsic(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 7_631_000 picoseconds.
		Weight::from_parts(7_985_534, 1493)
			// Standard Error: 162
			.saturating_add(Weight::from_parts(160_256, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn schedule_xcmp_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 12_439_000 picoseconds.
		Weight::from_parts(12_732_000, 1493)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationPrice Tasks (r:1 w:0)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_extrinsic() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 9_191_000 picoseconds.
		Weight::from_parts(9_360_000, 3579)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 36_565_000 picoseconds.
		Weight::from_parts(37_294_000, 3946)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: AutomationPrice SortedTasksIndex (r:1 w:0)
	/// Proof Skipped: AutomationPrice SortedTasksIndex (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice SortedTasksByExpiration (r:1 w:1)
	/// Proof Skipped: AutomationPrice SortedTasksByExpiration (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationPrice TaskStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice TaskStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice AccountStats (r:1 w:0)
	/// Proof Skipped: AutomationPrice AccountStats (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationPrice Tasks (r:0 w:1)
	/// Proof Skipped: AutomationPrice Tasks (max_values: None, max_size: None, mode: Measured)
	fn remove_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `114`
		//  Estimated: `3579`
		// Minimum execution time: 23_104_000 picoseconds.
		Weight::from_parts(23_629_000, 3579)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn emit_event() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_568_000 picoseconds.
		Weight::from_parts(5_701_000, 0)
	}
}
