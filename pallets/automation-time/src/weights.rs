// This file is part of OAK-blockchain.

// Copyright (C) OAK Network Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_automation_time
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `actions-runner-1`, CPU: `Intel(R) Xeon(R) E-2388G CPU @ 3.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("turing-dev"), DB CACHE: 1024

// Executed Command:
// ./oak-collator
// benchmark
// pallet
// --header
// ./.maintain/HEADER-GPL3
// --chain
// turing-dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_automation_time
// --extrinsic
// *
// --repeat
// 20
// --steps
// 50
// --output
// ./automation_time-raw-weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_automation_time.
pub trait WeightInfo {
	fn schedule_xcmp_task_full(v: u32, ) -> Weight;
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight;
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight;
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight;
	fn cancel_scheduled_task_full() -> Weight;
	fn force_cancel_scheduled_task() -> Weight;
	fn force_cancel_scheduled_task_full() -> Weight;
	fn cancel_task_with_schedule_as_full() -> Weight;
	fn run_xcmp_task() -> Weight;
	fn run_auto_compound_delegated_stake_task() -> Weight;
	fn run_dynamic_dispatch_action() -> Weight;
	fn run_dynamic_dispatch_action_fail_decode() -> Weight;
	fn run_missed_tasks_many_found(v: u32, ) -> Weight;
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight;
	fn run_tasks_many_found(v: u32, ) -> Weight;
	fn run_tasks_many_missing(v: u32, ) -> Weight;
	fn update_task_queue_overhead() -> Weight;
	fn append_to_missed_tasks(v: u32, ) -> Weight;
	fn update_scheduled_task_queue() -> Weight;
	fn shift_missed_tasks() -> Weight;
}

/// Weights for pallet_automation_time using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:2 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry Metadata (r:1 w:0)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_xcmp_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2072 + v * (8712 ±0)`
		//  Estimated: `8799 + v * (11187 ±0)`
		// Minimum execution time: 211_335_000 picoseconds.
		Weight::from_parts(177_202_346, 8799)
			// Standard Error: 14_822
			.saturating_add(Weight::from_parts(35_940_613, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 11187).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6747`
		//  Estimated: `10212`
		// Minimum execution time: 116_002_000 picoseconds.
		Weight::from_parts(117_982_000, 10212)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790`
		//  Estimated: `6196 + v * (2475 ±0)`
		// Minimum execution time: 85_418_000 picoseconds.
		Weight::from_parts(82_644_388, 6196)
			// Standard Error: 3_138
			.saturating_add(Weight::from_parts(4_276_794, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1673 + v * (8712 ±0)`
		//  Estimated: `6196 + v * (11187 ±0)`
		// Minimum execution time: 132_268_000 picoseconds.
		Weight::from_parts(97_710_265, 6196)
			// Standard Error: 12_196
			.saturating_add(Weight::from_parts(36_421_478, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 11187).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316368`
		//  Estimated: `406458`
		// Minimum execution time: 1_369_078_000 picoseconds.
		Weight::from_parts(1_383_332_000, 406458)
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462`
		//  Estimated: `3927`
		// Minimum execution time: 29_478_000 picoseconds.
		Weight::from_parts(30_035_000, 3927)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316368`
		//  Estimated: `406458`
		// Minimum execution time: 1_317_376_000 picoseconds.
		Weight::from_parts(1_329_581_000, 406458)
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_with_schedule_as_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3402`
		//  Estimated: `93492`
		// Minimum execution time: 174_610_000 picoseconds.
		Weight::from_parts(176_574_000, 93492)
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().writes(37_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 38_892_000 picoseconds.
		Weight::from_parts(39_526_000, 3946)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn run_auto_compound_delegated_stake_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1464`
		//  Estimated: `4929`
		// Minimum execution time: 81_013_000 picoseconds.
		Weight::from_parts(82_364_000, 4929)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn run_dynamic_dispatch_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3598`
		// Minimum execution time: 8_775_000 picoseconds.
		Weight::from_parts(9_118_000, 3598)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn run_dynamic_dispatch_action_fail_decode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 889_000 picoseconds.
		Weight::from_parts(926_000, 0)
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (278 ±0)`
		//  Estimated: `1871 + v * (1872 ±0)`
		// Minimum execution time: 253_000 picoseconds.
		Weight::from_parts(320_018, 1871)
			// Standard Error: 4_362
			.saturating_add(Weight::from_parts(21_334_781, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1872).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:0)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (109 ±0)`
		//  Estimated: `1787 + v * (1787 ±0)`
		// Minimum execution time: 229_000 picoseconds.
		Weight::from_parts(279_255, 1787)
			// Standard Error: 3_792
			.saturating_add(Weight::from_parts(9_569_344, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1787).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128 + v * (410 ±0)`
		//  Estimated: `2001 + v * (2002 ±0)`
		// Minimum execution time: 3_436_000 picoseconds.
		Weight::from_parts(3_631_375, 2001)
			// Standard Error: 11_771
			.saturating_add(Weight::from_parts(42_862_324, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2002).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 2_694_000 picoseconds.
		Weight::from_parts(2_887_095, 1493)
			// Standard Error: 9_506
			.saturating_add(Weight::from_parts(118_704, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_task_queue_overhead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 2_790_000 picoseconds.
		Weight::from_parts(2_899_000, 1493)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:11 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 2]`.
	fn append_to_missed_tasks(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109 + v * (107 ±0)`
		//  Estimated: `13581 + v * (1065 ±165)`
		// Minimum execution time: 3_313_000 picoseconds.
		Weight::from_parts(3_435_839, 13581)
			// Standard Error: 36_299
			.saturating_add(Weight::from_parts(10_054_324, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1065).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime TaskQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime TaskQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn update_scheduled_task_queue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8910`
		//  Estimated: `12375`
		// Minimum execution time: 45_366_000 picoseconds.
		Weight::from_parts(45_858_000, 12375)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:0)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn shift_missed_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `3681`
		// Minimum execution time: 6_185_000 picoseconds.
		Weight::from_parts(6_460_000, 3681)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:2 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry Metadata (r:1 w:0)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_xcmp_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2072 + v * (8712 ±0)`
		//  Estimated: `8799 + v * (11187 ±0)`
		// Minimum execution time: 211_335_000 picoseconds.
		Weight::from_parts(177_202_346, 8799)
			// Standard Error: 14_822
			.saturating_add(Weight::from_parts(35_940_613, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(12_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 11187).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6747`
		//  Estimated: `10212`
		// Minimum execution time: 116_002_000 picoseconds.
		Weight::from_parts(117_982_000, 10212)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790`
		//  Estimated: `6196 + v * (2475 ±0)`
		// Minimum execution time: 85_418_000 picoseconds.
		Weight::from_parts(82_644_388, 6196)
			// Standard Error: 3_138
			.saturating_add(Weight::from_parts(4_276_794, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1673 + v * (8712 ±0)`
		//  Estimated: `6196 + v * (11187 ±0)`
		// Minimum execution time: 132_268_000 picoseconds.
		Weight::from_parts(97_710_265, 6196)
			// Standard Error: 12_196
			.saturating_add(Weight::from_parts(36_421_478, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 11187).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316368`
		//  Estimated: `406458`
		// Minimum execution time: 1_369_078_000 picoseconds.
		Weight::from_parts(1_383_332_000, 406458)
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `462`
		//  Estimated: `3927`
		// Minimum execution time: 29_478_000 picoseconds.
		Weight::from_parts(30_035_000, 3927)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316368`
		//  Estimated: `406458`
		// Minimum execution time: 1_317_376_000 picoseconds.
		Weight::from_parts(1_329_581_000, 406458)
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_task_with_schedule_as_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3402`
		//  Estimated: `93492`
		// Minimum execution time: 174_610_000 picoseconds.
		Weight::from_parts(176_574_000, 93492)
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().writes(37_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `3946`
		// Minimum execution time: 38_892_000 picoseconds.
		Weight::from_parts(39_526_000, 3946)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn run_auto_compound_delegated_stake_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1464`
		//  Estimated: `4929`
		// Minimum execution time: 81_013_000 picoseconds.
		Weight::from_parts(82_364_000, 4929)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn run_dynamic_dispatch_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3598`
		// Minimum execution time: 8_775_000 picoseconds.
		Weight::from_parts(9_118_000, 3598)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn run_dynamic_dispatch_action_fail_decode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 889_000 picoseconds.
		Weight::from_parts(926_000, 0)
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (278 ±0)`
		//  Estimated: `1871 + v * (1872 ±0)`
		// Minimum execution time: 253_000 picoseconds.
		Weight::from_parts(320_018, 1871)
			// Standard Error: 4_362
			.saturating_add(Weight::from_parts(21_334_781, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1872).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:0)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (109 ±0)`
		//  Estimated: `1787 + v * (1787 ±0)`
		// Minimum execution time: 229_000 picoseconds.
		Weight::from_parts(279_255, 1787)
			// Standard Error: 3_792
			.saturating_add(Weight::from_parts(9_569_344, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1787).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128 + v * (410 ±0)`
		//  Estimated: `2001 + v * (2002 ±0)`
		// Minimum execution time: 3_436_000 picoseconds.
		Weight::from_parts(3_631_375, 2001)
			// Standard Error: 11_771
			.saturating_add(Weight::from_parts(42_862_324, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2002).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 2_694_000 picoseconds.
		Weight::from_parts(2_887_095, 1493)
			// Standard Error: 9_506
			.saturating_add(Weight::from_parts(118_704, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_task_queue_overhead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1493`
		// Minimum execution time: 2_790_000 picoseconds.
		Weight::from_parts(2_899_000, 1493)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:11 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 2]`.
	fn append_to_missed_tasks(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109 + v * (107 ±0)`
		//  Estimated: `13581 + v * (1065 ±165)`
		// Minimum execution time: 3_313_000 picoseconds.
		Weight::from_parts(3_435_839, 13581)
			// Standard Error: 36_299
			.saturating_add(Weight::from_parts(10_054_324, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((5_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1065).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime TaskQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime TaskQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn update_scheduled_task_queue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8910`
		//  Estimated: `12375`
		// Minimum execution time: 45_366_000 picoseconds.
		Weight::from_parts(45_858_000, 12375)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:0)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn shift_missed_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `3681`
		// Minimum execution time: 6_185_000 picoseconds.
		Weight::from_parts(6_460_000, 3681)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
