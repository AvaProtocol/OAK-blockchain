
//! Autogenerated weights for `pallet_automation_time`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Air.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("turing-dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/oak-collator
// benchmark
// pallet
// --chain=turing-dev
// --steps=50
// --repeat=20
// --pallet=pallet_automation_time
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/automation_time-raw-weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_automation_time`.
pub trait WeightInfo {
	fn schedule_xcmp_task_full(v: u32, ) -> Weight;
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight;
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight;
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight;
	fn cancel_scheduled_task_full() -> Weight;
	fn force_cancel_scheduled_task() -> Weight;
	fn force_cancel_scheduled_task_full() -> Weight;
	fn run_xcmp_task() -> Weight;
	fn run_auto_compound_delegated_stake_task() -> Weight;
	fn run_dynamic_dispatch_action() -> Weight;
	fn run_dynamic_dispatch_action_fail_decode() -> Weight;
	fn run_missed_tasks_many_found(v: u32, ) -> Weight;
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight;
	fn run_tasks_many_found(v: u32, ) -> Weight;
	fn run_tasks_many_missing(v: u32, ) -> Weight;
	fn update_task_queue_overhead() -> Weight;
	fn append_to_missed_tasks(v: u32, ) -> Weight;
	fn update_scheduled_task_queue() -> Weight;
	fn shift_missed_tasks() -> Weight;
}

/// Weights for `pallet_automation_time` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry Metadata (r:1 w:0)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_xcmp_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2170 + v * (8743 ±0)`
		//  Estimated: `32585 + v * (37447 ±0)`
		// Minimum execution time: 158_000_000 picoseconds.
		Weight::from_parts(112_965_368, 32585)
			// Standard Error: 47_187
			.saturating_add(Weight::from_parts(35_001_694, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 37447).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6843`
		//  Estimated: `34162`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(98_000_000, 34162)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `854`
		//  Estimated: `13720 + v * (2475 ±0)`
		// Minimum execution time: 73_000_000 picoseconds.
		Weight::from_parts(70_444_785, 13720)
			// Standard Error: 4_510
			.saturating_add(Weight::from_parts(3_738_120, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1741 + v * (8743 ±0)`
		//  Estimated: `16378 + v * (28704 ±0)`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(78_236_828, 16378)
			// Standard Error: 49_621
			.saturating_add(Weight::from_parts(35_023_294, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(3_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 28704).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317518`
		//  Estimated: `1045127`
		// Minimum execution time: 1_240_000_000 picoseconds.
		Weight::from_parts(1_265_000_000, 1045127)
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `7523`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 7523)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317518`
		//  Estimated: `1045127`
		// Minimum execution time: 1_235_000_000 picoseconds.
		Weight::from_parts(1_250_000_000, 1045127)
			.saturating_add(T::DbWeight::get().reads(39_u64))
			.saturating_add(T::DbWeight::get().writes(37_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `6411`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6411)
			.saturating_add(T::DbWeight::get().reads(3_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn run_auto_compound_delegated_stake_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1623`
		//  Estimated: `27504`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(64_000_000, 27504)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn run_dynamic_dispatch_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3236`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3236)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	fn run_dynamic_dispatch_action_fail_decode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (309 ±0)`
		//  Estimated: `1392 + v * (1392 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(4_081, 1392)
			// Standard Error: 28_955
			.saturating_add(Weight::from_parts(19_295_918, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1392).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:0)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (109 ±0)`
		//  Estimated: `1292 + v * (1292 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(22_448, 1292)
			// Standard Error: 50_310
			.saturating_add(Weight::from_parts(8_177_551, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1292).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128 + v * (441 ±0)`
		//  Estimated: `4079 + v * (3576 ±0)`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 4079)
			// Standard Error: 30_365
			.saturating_add(Weight::from_parts(37_500_000, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 3576).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `503`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_855_102, 503)
			// Standard Error: 112_358
			.saturating_add(Weight::from_parts(44_897, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_task_queue_overhead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `503`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 503)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 2]`.
	fn append_to_missed_tasks(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109 + v * (71 ±0)`
		//  Estimated: `1158 + v * (1189 ±0)`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(2_953_591, 1158)
			// Standard Error: 49_437
			.saturating_add(Weight::from_parts(1_343_093, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1189).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime TaskQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime TaskQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn update_scheduled_task_queue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8942`
		//  Estimated: `30291`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 30291)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn shift_missed_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8942`
		//  Estimated: `11417`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 11417)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry Metadata (r:1 w:0)
	/// Proof Skipped: AssetRegistry Metadata (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(28), added: 2503, mode: MaxEncodedLen)
	/// Storage: System Account (r:3 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_xcmp_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2170 + v * (8743 ±0)`
		//  Estimated: `32585 + v * (37447 ±0)`
		// Minimum execution time: 158_000_000 picoseconds.
		Weight::from_parts(112_965_368, 32585)
			// Standard Error: 47_187
			.saturating_add(Weight::from_parts(35_001_694, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 37447).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn schedule_auto_compound_delegated_stake_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6843`
		//  Estimated: `34162`
		// Minimum execution time: 96_000_000 picoseconds.
		Weight::from_parts(98_000_000, 34162)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `854`
		//  Estimated: `13720 + v * (2475 ±0)`
		// Minimum execution time: 73_000_000 picoseconds.
		Weight::from_parts(70_444_785, 13720)
			// Standard Error: 4_510
			.saturating_add(Weight::from_parts(3_738_120, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[1, 36]`.
	fn schedule_dynamic_dispatch_task_full(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1741 + v * (8743 ±0)`
		//  Estimated: `16378 + v * (28704 ±0)`
		// Minimum execution time: 109_000_000 picoseconds.
		Weight::from_parts(78_236_828, 16378)
			// Standard Error: 49_621
			.saturating_add(Weight::from_parts(35_023_294, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 28704).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317518`
		//  Estimated: `1045127`
		// Minimum execution time: 1_240_000_000 picoseconds.
		Weight::from_parts(1_265_000_000, 1045127)
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().writes(37_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `525`
		//  Estimated: `7523`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(27_000_000, 7523)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime LastTimeSlot (r:1 w:0)
	/// Proof Skipped: AutomationTime LastTimeSlot (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:36 w:36)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn force_cancel_scheduled_task_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `317518`
		//  Estimated: `1045127`
		// Minimum execution time: 1_235_000_000 picoseconds.
		Weight::from_parts(1_250_000_000, 1045127)
			.saturating_add(RocksDbWeight::get().reads(39_u64))
			.saturating_add(RocksDbWeight::get().writes(37_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: UnknownTokens ConcreteFungibleBalances (r:1 w:0)
	/// Proof Skipped: UnknownTokens ConcreteFungibleBalances (max_values: None, max_size: None, mode: Measured)
	/// Storage: AssetRegistry LocationToAssetId (r:1 w:0)
	/// Proof Skipped: AssetRegistry LocationToAssetId (max_values: None, max_size: None, mode: Measured)
	fn run_xcmp_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `481`
		//  Estimated: `6411`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_000_000, 6411)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
	}
	/// Storage: ParachainInfo ParachainId (r:1 w:0)
	/// Proof: ParachainInfo ParachainId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
	/// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidateInfo (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking TopDelegations (r:1 w:1)
	/// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking Total (r:1 w:1)
	/// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
	fn run_auto_compound_delegated_stake_task() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1623`
		//  Estimated: `27504`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(64_000_000, 27504)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	fn run_dynamic_dispatch_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `133`
		//  Estimated: `3236`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3236)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	fn run_dynamic_dispatch_action_fail_decode() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (309 ±0)`
		//  Estimated: `1392 + v * (1392 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(4_081, 1392)
			// Standard Error: 28_955
			.saturating_add(Weight::from_parts(19_295_918, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1392).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime AccountTasks (r:1 w:0)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_missed_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + v * (109 ±0)`
		//  Estimated: `1292 + v * (1292 ±0)`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(22_448, 1292)
			// Standard Error: 50_310
			.saturating_add(Weight::from_parts(8_177_551, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 1292).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: AutomationTime AccountTasks (r:1 w:1)
	/// Proof Skipped: AutomationTime AccountTasks (max_values: None, max_size: None, mode: Measured)
	/// Storage: Valve ValveClosed (r:1 w:0)
	/// Proof Skipped: Valve ValveClosed (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Valve ClosedPallets (r:1 w:0)
	/// Proof Skipped: Valve ClosedPallets (max_values: None, max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_found(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `128 + v * (441 ±0)`
		//  Estimated: `4079 + v * (3576 ±0)`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 4079)
			// Standard Error: 30_365
			.saturating_add(Weight::from_parts(37_500_000, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 3576).saturating_mul(v.into()))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// The range of component `v` is `[0, 1]`.
	fn run_tasks_many_missing(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `503`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_855_102, 503)
			// Standard Error: 112_358
			.saturating_add(Weight::from_parts(44_897, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	fn update_task_queue_overhead() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `503`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(3_000_000, 503)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 2]`.
	fn append_to_missed_tasks(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109 + v * (71 ±0)`
		//  Estimated: `1158 + v * (1189 ±0)`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(2_953_591, 1158)
			// Standard Error: 49_437
			.saturating_add(Weight::from_parts(1_343_093, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1189).saturating_mul(v.into()))
	}
	/// Storage: AutomationTime TaskQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime TaskQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime MissedQueueV2 (r:1 w:1)
	/// Proof Skipped: AutomationTime MissedQueueV2 (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn update_scheduled_task_queue() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8942`
		//  Estimated: `30291`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 30291)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: AutomationTime ScheduledTasksV3 (r:1 w:1)
	/// Proof Skipped: AutomationTime ScheduledTasksV3 (max_values: None, max_size: None, mode: Measured)
	fn shift_missed_tasks() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `8942`
		//  Estimated: `11417`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 11417)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}