
//! Autogenerated weights for `pallet_vesting`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Air.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("turing-dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/oak-collator
// benchmark
// pallet
// --chain=turing-dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/vesting/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_vesting`.
pub trait WeightInfo {
	fn vest(v: u32, ) -> Weight;
}

/// Weights for `pallet_vesting` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Vesting VestingSchedule (r:1 w:1)
	/// Proof Skipped: Vesting VestingSchedule (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:20 w:20)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Vesting TotalUnvestedAllocation (r:1 w:1)
	/// Proof Skipped: Vesting TotalUnvestedAllocation (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 20]`.
	fn vest(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318 + v * (55 ±0)`
		//  Estimated: `4088 + v * (2716 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(14_973_827, 4088)
			// Standard Error: 20_306
			.saturating_add(Weight::from_parts(22_021_656, 0).saturating_mul(v.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(v.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Vesting VestingSchedule (r:1 w:1)
	/// Proof Skipped: Vesting VestingSchedule (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:20 w:20)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Vesting TotalUnvestedAllocation (r:1 w:1)
	/// Proof Skipped: Vesting TotalUnvestedAllocation (max_values: Some(1), max_size: None, mode: Measured)
	/// The range of component `v` is `[0, 20]`.
	fn vest(v: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318 + v * (55 ±0)`
		//  Estimated: `4088 + v * (2716 ±0)`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(14_973_827, 4088)
			// Standard Error: 20_306
			.saturating_add(Weight::from_parts(22_021_656, 0).saturating_mul(v.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(v.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(v.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(v.into()))
	}
}